---
title: Combined Experiments
author:
- name: Thomas Gorman
  url: https://tegorman13.github.io/
  orcid: 0000-0001-5366-5442
date: last-modified
lightbox: true
toc: true
page-layout: full
format:
  html: 
    grid:
      sidebar-width: 200px
      body-width: 1250px
      margin-width: 140px
      gutter-width: 1.0rem
  # hikmah-manuscript-pdf:
  #   echo: false
  #   #output-file: "all_exp.pdf"
  #   mainfont: "Linux Libertine O"
  #   mainfontoptions:
  #     - "Numbers=Proportional"
  #     - "Numbers=OldStyle"
  #   mathfont: "Libertinus Math"
  pdf:
    toc: false
    echo: false
    #fig-pos: 'H'
    mathfont: "Libertinus Math"
    #documentclass: article
   # papersize: letter
    fontsize: 9.5pt
    linestretch: 1.0
    geometry:
      - top=.5in     
      - bottom=.1in  
      - left=.25in    
      - right=.1in  
      - heightrounded
  docx:
    echo: false
    prefer-html: true
toc-depth: 3
code-fold: true
code-tools: true
execute: 
  warning: false
  eval: true
---


<br><br>


## Paper Figures

Relevant figures from [@huExemplarmodelAccountCategorization2022; @huHighvariabilityTrainingDoes2024] 

*click on image to enlarge*

:::: {.panel-tabset}

### 2022 Paper

::: {layout-nrow=2}
![2022 Learning Curves](/assets/2022_learning_curves.png)

![2022 Test Accuracy](/assets/2022_testAvg.png)

![2022 Model Predictions](/assets/2022_testModel.png)

:::

### 2024 Paper

::: {layout-nrow=2}
![2024 Learning Curves](/assets/2024_learning_curves.png)

![2024 Test Accuracy](/assets/2024_testAvg.png)

![2024 Test Accuracy - Quartile](/assets/2024_testQ.png)

![2024 Model Predictions](/assets/2024_testModel.png)
:::

### Fixed Prototype Pilot

::: {layout-nrow=1}
![Pilot Learning Curves](/assets/fp_pilot_train.png)

![Pilot Test Accuracy](/assets/fp_pilot_test.png)
:::
::::

<br><br>




### Comparison of Dot-Pattern Classification Studies

:::: column-page-inset-right
::: {#tbl-designs}

| Study                 | **Hu & Nosofsky (2022)** | **Hu & Nosofsky (2024)** | **Fixed Prototype Pilot Study** |
|-------------------------|---------------------------|---------------------------|----------------------------------|
| **Publication**         | *JEP: Learning, Memory, and Cognition*   | *Memory & Cognition*        | *(unpublished pilot study)*      |
| **Participants**        | - 89 Indiana University undergraduates<br>- Course credit participation<br>- Random assignment to conditions (REP or NREP)<br>- Normal or corrected vision  | - 304 Indiana University students<br>- Random assignment to conditions (low, medium, high, or mixed distortion) | Not specified                    |
| **Training Stage**       | **Training Stage**        | **Training Stage**         | **Training Stage**                |
| • **Procedure**         | - **REP Condition:** 15 unique patterns (5 per category), repeated across 15 blocks (**225 trials total**)<br>- **NREP Condition:** 75 unique patterns (5 per category per block), no repetitions (**225 trials total**) | - 10 blocks, 27 trials each (**270 trials total**)<br>- Different set of training patterns in each block<br>- Corrective feedback for 2 seconds after each response | - Training patterns repeated across 10 blocks with randomized presentation order within each block<br>- Four between-subject conditions: low, medium, high, and mixed distortion levels |
| • **Stimuli**           | - 15 or 75 unique dot patterns (depending on condition)<br>- Created using Posner (1967) procedure | - Variable number of unique dot patterns<br>| - 27 unique dot patterns (9 per category)<br> |
| **Testing Stage**       | **Transfer Phase**        | **Testing Stage**         | **Testing Stage**                |
| • **Procedure**         | - 63 trials total<br>- Random order of presentation | - 84 trials total<br>- Random order of presentation | - 87 trials total<br>- Random order of presentation |
| • **Stimuli**           | - 15 old distortions (5 per category)<br>- 3 prototypes (one per category)<br>- 15 low-level distortions (5 per category)<br>- 15 new medium-level distortions (5 per category)<br>- 15 high-level distortions (5 per category) | - 27 old patterns from the training phase (9 per category)<br>- 3 prototypes (one per category)<br>- 9 new low-level distortions (3 per category)<br>- 18 new medium-level distortions (6 per category)<br>- 27 new high-level distortions (9 per category) | - 27 old distortions (9 per category)<br>- 3 prototypes (1 per category)<br>- 9 new low-level distortions (3 per category)<br>- 18 

**Notes:**

- **REP:** Repeating Protocol
- **NREP:** Nonrepeating Protocol
- **Hu & Nosofsky (2022)** investigated the effects of repeating vs. nonrepeating training 
    patterns on category learning and generalization.
- **Hu & Nosofsky (2024)** examined the impact of different training distortion levels on category 
    learning and generalization. Each subject has unique prototype set. 
- **Fixed Prototype Pilot Study** examined the impact of different training distortion levels on category 
    learning and generalization. Fixed set of prototypes across all subjects. 
- All studies used a dot pattern categorization paradigm where participants learned to classify patterns
  into categories based on visual similarity.
- Dot pattern distortions were created using a modified Posner-Keele (1968) procedure. 
  Low, medium and high distortions displaced the dots by an average of 4, 6, and 7.7 Posner-levels respectively.

:::
::::



\pagebreak


```{r}

pacman::p_load(dplyr,purrr,tidyr,ggplot2,readr,here, patchwork, conflicted,ggh4x)
conflict_prefer_all("dplyr", quiet = TRUE)
source(here::here("R/fun_plot.R"))

lmc22 <- readRDS(here("data","lmc22.rds")) |> mutate(Pattern_Token = case_when(
      Pattern.Type == "Trained.Med" ~ "old",
      Pattern.Type2 == "Prototype"~ "prototype",
      Pattern.Type2 == "New.Low"  ~ "new_low",
      Pattern.Type2 == "New.Med" ~ "new_med",
      Pattern.Type2 == "New.High" ~ "new_high"
    )) |> # set phase="Training" when Phase==1, and phase="Test" when Phase==2
  mutate(phase = case_when(
    Phase==1 ~ "Training",
    Phase==2 ~ "Test"
  ), 
  Stage = case_when(
  Stage=="Med" ~ "Middle",
  TRUE ~ Stage
)) 
  
  

mc24 <- readRDS(here("data","mc24.rds"))
fp24 <- readRDS(here("data","fixed_proto24.rds")) |>
  mutate(Stage = case_when(
    phase=="Test" ~ "Test",
    TRUE ~ Stage
  )) 

all_data <- fp24 |> select(-pool_index) |> rbind(mc24) |> rbind(lmc22)
all_data$Pattern_Token = factor(all_data$Pattern_Token,levels=c("old","prototype","new_low","new_med","new_high","special")) 
all_data$condit = factor(all_data$condit,levels=c("low","medium","mixed","high","nrep","rep"))
all_data$exp = factor(all_data$exp,levels=c("lmc22","mc24","fixed_proto"))
all_data$exp2 = factor(all_data$exp,labels=c("Hu & Nosofsky 2022","Hu & Nosofsky 2024","Fixed Prototype Pilot"))
all_data$Stage = factor(all_data$Stage,levels=c("Start","Middle","End","Test"))
all_data$phase = factor(all_data$phase,levels=c("Training","Test"))

theme_set(theme_nice())

yt <- round(seq(0,1,length.out=7), 2)
xt <- seq(1,10,1)
eg <- list(geom_hline(yintercept = c(.33, .66),linetype="dashed", alpha=.5),
           scale_y_continuous(breaks=yt,limits=c(0,1)),
           scale_x_continuous(breaks=xt))



dtf <- all_data |> filter(Stage=="End") |> 
  group_by(sbjCode, condit, Pattern_Token,exp2,Stage,Phase,phase) |>
  summarize(propCor=mean(Corr)) |>
  arrange(-propCor) |>
  group_by(exp2,condit) |> # bin into quartile by propCor
  mutate(quartile = ntile(propCor, 4), finalTrain=propCor) 


all_data <- all_data |> 
  select(-quartile) |> # remove original quartile var
  left_join(dtf |> 
              select(sbjCode,condit,quartile,exp2), by=c("sbjCode","condit","exp2"))


html <- ifelse(knitr::pandoc_to() %in% c("html"), TRUE, FALSE)
out_type <- knitr::opts_knit$get("rmarkdown.pandoc.to")

if (html) {fw=11;rel_size=.7;} else {fw=8;rel_size=.5}

print(fw)

# Check trial totals
# all_data |> filter(Phase==1) |> group_by(sbjCode,condit,exp) |> summarise(n=max(trial)) |> 
#   group_by(condit,exp) |>
#   distinct(n) |> arrange(exp)

# all_data |> filter(Phase==2) |> group_by(sbjCode,condit,exp) |> summarise(nAll=max(trial),nTrain=min(trial)-1,n=nAll-nTrain) |> 
#   group_by(condit,exp) |>
#   distinct(n) |> arrange(exp)

# all_data |> group_by(Phase,sbjCode,condit,exp) |> 
#   summarise(n=n_distinct(trial)) |> 
#   group_by(Phase,condit,exp) |> 
#   distinct(n) |> 
#   pivot_wider(names_from=Phase,values_from=n) |> 
#   rename(nTrain=`1`,nTest=`2`) |> 
#   arrange(exp)
```




## Training & Testing shown together

These plots show mean performance at the start, middle and end of training (first 3 points), and the testing performance for each item type (final 5 points). 

*click on plots to enlarge*

:::: .smaller
::: {.column-screen-inset-right}
```{r}
#| fig-width: !expr fw
#| fig-height:  !expr fw-2

if(html) theme_set(theme_nice())  else theme_set(theme_nice_pdf())

all_data |> 
  filter(Pattern_Token != "special") |> 
  group_by(sbjCode, condit, Pattern_Token,exp2,Stage,Phase,phase) |>
  summarize(Corr=mean(Corr)) |>
  group_by(condit,Pattern_Token,exp2,Stage,Phase,phase) |> 
  summarise(empirical_stat = mean(Corr), 
            sem = sd(Corr)/sqrt(length(Corr)),
            ci_lower = mean(Corr) - sem,
            ci_upper = mean(Corr) + sem) |>
  mutate(method = "standard error") |> 
  ggplot(aes(x=interaction(Pattern_Token,Stage,phase), y=empirical_stat, col=condit, group=condit)) +  
  geom_point(aes(shape=phase),color="black",size=3.5) +
  geom_line(aes(group = condit)) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper),width=.3) +
  geom_vline(xintercept=c(3.5),linetype="dashed", alpha=.5) +
  facet_wrap(~exp2,scale="free_x") + 
  labs(x="Item Type and Experiment Stage",y="Accuracy",col="Training Condition",title="Training & Testing Performance", 
       subtitle="Training binned into 3 stages, and Testing Performance for each Item Type") +
  theme(ggh4x.axis.nestline  = element_line(colour = "black"), 
  axis.text.x = element_text(face = "plain", size = rel(rel_size))) + 
  scale_x_discrete(guide = "axis_nested")



```
:::




::: {.column-screen-inset-right}
```{r}
#| fig-width: !expr fw
#| fig-height: !expr fw+1

all_data |> 
  filter(Pattern_Token != "special") |> 
  group_by(sbjCode, condit, Pattern_Token,exp2,Stage,Phase,phase,quartile) |>
  summarize(Corr=mean(Corr)) |>
  group_by(condit,Pattern_Token,exp2,Stage,Phase,phase,quartile) |> 
  summarise(empirical_stat = mean(Corr), 
            sem = sd(Corr)/sqrt(length(Corr)),
            ci_lower = mean(Corr) - sem,
            ci_upper = mean(Corr) + sem) |>
  mutate(method = "standard error",quartile=factor(quartile,levels=c("1","2","3","4"))) |> 
  ggplot(aes(x=interaction(Pattern_Token,Stage,phase), y=empirical_stat, col=condit, group=condit)) +  
  geom_point(aes(shape=phase),color="black",size=3.5) +
  geom_line(aes(group = condit)) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper),width=.3) +
  geom_vline(xintercept=c(3.5),linetype="dashed", alpha=.5) +
  facet_wrap(exp2~quartile,scale="free_x") + 
  labs(x="Item Type and Experiment Stage",y="Accuracy",col="Training Condition",title="Training & Testing Performance - Quartiles", 
       subtitle="Training binned into 3 stages, and Testing Performance for each Item Type\nSplit into 4 quartiles based on end of training performance (1=worst; 4=best)") +
  theme(ggh4x.axis.nestline  = element_line(colour = "black"),
        axis.text.x = element_text(face = "plain", size = rel(rel_size-.2))) + 
  scale_x_discrete(guide = "axis_nested")
```
:::

::::





## Test Stage Comparisons

::: {.panel-tabset}

### Facet by experiment
```{r}
#| fig-width: 13
#| fig-height: 11
##| fig-cap: "lmc22: Hu & Nosofsky 2022; mc24: Hu & Nosofsky 2024; fixed_proto: Fixed Prototype Pilot Study"

#if(html) theme_set(theme_nice_b()) else theme_set(theme_minimal())



#theme_set(theme_minimal())

all_data |> filter(Phase==2, Pattern_Token != "special") |>
  group_by(sbjCode, condit, Pattern_Token,exp2) |>
  summarize(Corr=mean(Corr)) |>
  group_by(condit,Pattern_Token,exp2) |> 
  summarise(empirical_stat = mean(Corr), 
            sem = sd(Corr)/sqrt(length(Corr)),
            ci_lower = mean(Corr) - sem,
            ci_upper = mean(Corr) + sem) |>
  mutate(method = "standard error") |> 
  ggplot(aes(x=Pattern_Token, y=empirical_stat, col=condit, group=condit)) +  
  geom_point() +
  geom_line(aes(group = condit)) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper)) +
  labs(x="Item Type",y="Accuracy",col="Training Condition",title="Testing Performance") +
  facet_wrap(~exp2)

```

### Facet by item type
```{r}
#| fig-width: 13
#| fig-height: 11

all_data |> filter(Phase==2, Pattern_Token != "special") |>
  group_by(sbjCode, condit, Pattern_Token,exp2) |>
  summarize(Corr=mean(Corr)) |>
  group_by(condit,Pattern_Token,exp2) |> 
  summarise(empirical_stat = mean(Corr), 
            sem = sd(Corr)/sqrt(length(Corr)),
            ci_lower = mean(Corr) - sem,
            ci_upper = mean(Corr) + sem) |>
  mutate(method = "standard error") |> 
  ggplot(aes(x=condit, y=empirical_stat, col=exp2, group=exp2)) +  
  geom_point() +
  geom_line(aes(group = exp2)) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper)) +
  facet_wrap(~Pattern_Token) + 
    labs(x="Training Condition",y="Accuracy",col="Study",title="Testing Performance") 

```



### Facet by train group
```{r}
#| fig-width: 13
#| fig-height: 11

all_data |> filter(Phase==2, Pattern_Token != "special") |>
  group_by(sbjCode, condit, Pattern_Token,exp2) |>
  summarize(Corr=mean(Corr)) |> 
  group_by(condit,Pattern_Token,exp2) |> 
  summarise(empirical_stat = mean(Corr), 
            sem = sd(Corr)/sqrt(length(Corr)),
            ci_lower = mean(Corr) - sem,
            ci_upper = mean(Corr) + sem) |>
  mutate(method = "standard error") |> 
  ggplot(aes(x=Pattern_Token, y=empirical_stat, col=exp2, group=exp2)) +  
  geom_point() +
  geom_line(aes(group = exp2)) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper)) +
  facet_wrap(~condit) + 
  labs(x="Item Type",y="Accuracy",col="Study",title="Testing Performance") 


```


:::




## Training Stage Comparisons

::: {.panel-tabset}


### Facet by Exp

```{r}
#| fig-width: 12
#| fig-height: 10
nbins=10
all_data |> filter(Phase==1) |>
  group_by(sbjCode, condit,exp2) |> 
  mutate(nTrain=max(trial),
         train_bin = cut(trial,breaks=seq(1,max(trial),length.out=nbins+1),include.lowest=TRUE,labels=FALSE)) |> 
  group_by(sbjCode,train_bin, condit,exp2) |> 
  summarize(Corr=mean(Corr),.groups="keep") |>
  ggplot(aes(x=train_bin,y=Corr,fill=condit,col=condit)) +
  stat_summary(geom="line",fun=mean)+
  stat_summary(geom="errorbar",fun.data=mean_se) +
  facet_wrap(~exp2,scales="free_x") +
   labs(title="Training  - All Sbjs.", y="Accuracy",col="Training Condition", x="Trial Bin",
        subtitle="Training accuracy - 10 bins") +
  scale_x_continuous(breaks=seq(1,nbins)) +
  scale_y_continuous(breaks=round(seq(0,1,length.out=7), 2)) +
  geom_hline(yintercept = c(.33, .66),linetype="dashed", alpha=.5)


```

*click on plots to enlarge*

::: {.column-page-right}
```{r}
#| fig-width: !expr fw
#| fig-height: !expr fw-1
#| 
nbins=10

grp_avg <- all_data |> filter(Phase==1) |>
  group_by(sbjCode, condit,exp2) |> 
  mutate(nTrain=max(trial),
         train_bin = cut(trial,breaks=seq(1,max(trial),length.out=nbins+1),include.lowest=TRUE,labels=FALSE)) |> 
  group_by(sbjCode,train_bin, condit,exp2) |> 
  summarize(Corr=mean(Corr),.groups="keep") 

design <- "
  AB##
  CDEF
  HIJK
"


all_data |> filter(Phase==1) |>
  group_by(sbjCode, condit,exp2) |> 
  mutate(nTrain=max(trial),
         train_bin = cut(trial,breaks=seq(1,max(trial),length.out=nbins+1),include.lowest=TRUE,labels=FALSE)) |> 
  group_by(sbjCode,train_bin, condit,exp2) |> 
  summarize(Corr=mean(Corr),.groups="keep") |>
  ggplot(aes(x=train_bin,y=Corr,group=sbjCode,fill=condit,col=condit)) +
  stat_summary(geom="line",fun=mean)+
  stat_summary(geom="errorbar",fun.data=mean_se) +
 # geom_line(data=grp_avg,aes(x=train_bin,y=Corr,group=condit),color="black") +
  stat_summary(data=grp_avg,aes(x=train_bin,y=Corr,group=condit),geom="line",fun=mean,color="black",size=1.2)+
  stat_summary(data=grp_avg,aes(x=train_bin,y=Corr,group=condit),geom="errorbar",fun.data=mean_se,color="black",width=.4)+
  #facet_grid2(vars(exp2), vars(condit), render_empty = FALSE)+
  #facet_nested(~exp2+condit,scales="free_x") +
  # facet_nested_wrap(~exp2+condit,scales="free_x") +
  facet_manual(~exp2+condit, design = design) + 
  #facet_wrap(exp2~condit,scales="free_x") +
   labs(title="Training - individual learning curves.", y="Accuracy",col="Training Condition", x="Trial Bin",
        subtitle="Training accuracy - each line is an individual sbj.\n Black lines are group averages") +
  scale_x_continuous(breaks=seq(1,nbins)) +
  scale_y_continuous(breaks=round(seq(0,1,length.out=7), 2)) +
  geom_hline(yintercept = c(.33, .66),linetype="dashed", alpha=.5)


```

:::



### Original Blocks

- Hu & Nosofsky 2022 had 15 blocks of 15 trials each - 225 trials total
- Hu & Nosofsky 2024 & Fixed Prototype pilot each had 10 blocks of 27 trials each - 270 trials total

```{r}
#| fig-width: 12
#| fig-height: 10
###| layout-ncol: 2 

all_data |> filter(Phase==1) |>
  group_by(sbjCode, condit, Pattern_Token,Block,exp2) |>
  summarize(Corr=mean(Corr),.groups="keep") |>
  ggplot(aes(x=Block, y=Corr, color=interaction(exp2,condit))) +  
  stat_summary(geom="line",fun=mean)+
  stat_summary(geom="errorbar", fun.data=mean_se,width=.1) +
  labs(title="Training Performance - All Sbjs.", y="Accuracy") +   #eg +  
  theme(legend.position = "top") + list(geom_hline(yintercept = c(.33, .66),linetype="dashed", alpha=.5),
           scale_y_continuous(breaks=yt,limits=c(0,1)),
           scale_x_continuous(breaks=seq(1:15)))

```

### Bin into equal sized blocks
```{r}
#| fig-width: 12
#| fig-height: 10
###| layout-ncol: 2 
nbins=10
all_data |> filter(Phase==1) |>
  group_by(sbjCode, condit,exp2) |> 
  mutate(nTrain=max(trial),
        train_bin = cut(trial,breaks=seq(1,max(trial),length.out=nbins+1),include.lowest=TRUE,labels=FALSE)) |> 
  group_by(sbjCode,train_bin, condit,exp) |> 
  summarize(Corr=mean(Corr),.groups="keep") |>
  ggplot(aes(x=train_bin, y=Corr, color=interaction(exp,condit))) +  
  stat_summary(geom="line",fun=mean)+
  stat_summary(geom="errorbar", fun.data=mean_se,width=.1) +
  labs(title="Training Performance - All Sbjs.", y="Accuracy") +   #eg +  
  theme(legend.position = "top") + list(geom_hline(yintercept = c(.33, .66),linetype="dashed", alpha=.5),
          scale_y_continuous(breaks=yt,limits=c(0,1)),
          scale_x_continuous(breaks=seq(1:15)))



```

::: 


<!-- ::: {.panel-tabset} -->

<!-- ### p1 -->

```{r}
#| eval: false
##| layout-ncol: 2 



all_data |> filter(Phase==2, Pattern_Token != "special") |>
  group_by(sbjCode, condit, Pattern_Token,exp) |>
  summarize(Corr=mean(Corr)) |>
  group_by(sbjCode,condit,Pattern_Token,exp) |> 
  mutate(method = "standard error") |> 
  ggplot(aes(x=Pattern_Token, y=Corr, col=condit, group=sbjCode)) +  
  geom_point() +
  geom_line(aes(group = sbjCode)) +
  labs(x="Item Type",y="Accuracy",col="Training Condition") +
  facet_wrap(condit~exp)


all_data |> 
  group_by(sbjCode, condit, Pattern_Token,exp2,Stage,Phase) |>
  summarize(Corr=mean(Corr)) |>
  group_by(condit,Pattern_Token,exp2,Stage,Phase) |> 
  summarise(empirical_stat = mean(Corr), 
            sem = sd(Corr)/sqrt(length(Corr)),
            ci_lower = mean(Corr) - sem,
            ci_upper = mean(Corr) + sem) |>
  mutate(method = "standard error") |> 
  ggplot(aes(x=Stage, y=empirical_stat, col=Pattern_Token, group=Pattern_Token)) +  
  geom_point() +
  geom_line(aes(group = Pattern_Token)) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper),width=.3) +
  facet_wrap(exp2~condit,scale="free_x") + 
  labs(x="Training Condition",y="Accuracy",col="Item Type",title="Testing Performance") 



fp24 |> filter(Phase==2) |>
  group_by(sbjCode, condit, Pattern_Token) |>
  summarize(Corr=mean(Corr)) |>
  ggplot(aes(x=Pattern_Token, y=Corr, fill=condit, group=condit)) +  
  stat_summary(geom="bar",fun=mean, position=position_dodge())+
  stat_summary(geom="errorbar", fun.data=mean_se, position=position_dodge()) +
  labs(title="Testing Performance - All Sbjs.", y="Accuracy") 

fp24 |> filter(Phase==2) |>
  group_by(sbjCode, condit, Pattern_Token) |>
  summarize(Corr=mean(Corr)) |>
  ggplot(aes(x=condit, y=Corr, fill=Pattern_Token, group=Pattern_Token)) +  
  stat_summary(geom="bar",fun=mean, position=position_dodge())+
  stat_summary(geom="errorbar", fun.data=mean_se, position=position_dodge()) +
  labs(title="Testing Performance - All Sbjs.", y="Accuracy") 


fp24 |> filter(Phase==1) |>
  group_by(sbjCode, condit, Pattern_Token,Block) |>
  summarize(Corr=mean(Corr),.groups="keep") |>
  ggplot(aes(x=Block, y=Corr, col=condit, group=condit)) +  
  stat_summary(geom="line",fun=mean)+
  stat_summary(geom="errorbar", fun.data=mean_se,width=.1) +
  labs(title="Testing Performance - All Sbjs.", y="Accuracy") +
  #eg +  
  theme(legend.position = "top") + eg
  


lmc22 |> filter(Phase==2) |>
  group_by(sbjCode, condit, Pattern_Token) |>
  summarize(Corr=mean(Corr)) |>
  ggplot(aes(x=condit, y=Corr, fill=Pattern_Token, group=Pattern_Token)) +  
  stat_summary(geom="bar",fun=mean, position=position_dodge())+
  stat_summary(geom="errorbar", fun.data=mean_se, position=position_dodge()) +
  labs(title="Testing Performance - All Sbjs.", y="Accuracy") 

```


<!-- ### p2 -->

```{r}
#| eval: false
#| fig-width: 11
#| fig-height: 13
#| layout-ncol: 2 
#| fig-cap: 
#|   - "Line Plot 1"
#|   - "Line Plot 2"
#|   - "Line Plot 4"
#|   - "Line Plot 5"



all_data |> filter(Phase==2) |>
  group_by(sbjCode, condit, Pattern_Token,exp2) |>
  summarize(Corr=mean(Corr)) |>
  group_by(condit,Pattern_Token,exp2) |> 
  summarise(empirical_stat = mean(Corr), 
            sem = sd(Corr)/sqrt(length(Corr)),
            ci_lower = mean(Corr) - sem,
            ci_upper = mean(Corr) + sem) |>
  mutate(method = "standard error") |> 
  ggplot(aes(x=condit, y=empirical_stat, col=Pattern_Token, group=Pattern_Token)) +  
  geom_point() +
  geom_line(aes(group = Pattern_Token)) +
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper),width=.3) +
  facet_wrap(~exp2,scale="free_x") + 
  labs(x="Training Condition",y="Accuracy",col="Item Type",title="Testing Performance") 




all_data |> filter(Phase==2) |>
  group_by(sbjCode, condit, Pattern_Token) |>
  summarize(Corr=mean(Corr)) |>
  ggplot(aes(x=condit, y=Corr, fill=Pattern_Token, group=Pattern_Token)) +  
  stat_summary(geom="bar",fun=mean, position=position_dodge())+
  stat_summary(geom="errorbar", fun.data=mean_se, position=position_dodge()) +
  labs(title="Testing Performance - All Sbjs.", y="Accuracy") 

all_data |> filter(Phase==2) |>
  group_by(sbjCode, condit, Pattern_Token,exp) |>
  summarize(Corr=mean(Corr)) |>
  ggplot(aes(x=condit, y=Corr, fill=Pattern_Token, group=Pattern_Token)) +  
  stat_summary(geom="bar",fun=mean, position=position_dodge())+
  stat_summary(geom="errorbar", fun.data=mean_se, position=position_dodge()) +
  facet_wrap(~exp,scales="free_x") +
  labs(title="Testing Performance - All Sbjs.", y="Accuracy") 

all_data |> filter(Phase==2) |>
  group_by(sbjCode, condit, Pattern_Token,exp) |>
  summarize(Corr=mean(Corr)) |>
  ggplot(aes(x=exp, y=Corr, fill=Pattern_Token, group=Pattern_Token)) +  
  stat_summary(geom="bar",fun=mean, position=position_dodge())+
  stat_summary(geom="errorbar", fun.data=mean_se, position=position_dodge()) +
  facet_wrap(~condit,scales="free_x") +
  labs(title="Testing Performance - All Sbjs.", y="Accuracy") 

all_data |> filter(Phase==2) |>
  group_by(sbjCode, condit, Pattern_Token,exp) |>
  summarize(Corr=mean(Corr)) |>
  ggplot(aes(x=condit, y=Corr, fill=exp, group=exp)) +  
  stat_summary(geom="bar",fun=mean, position=position_dodge())+
  stat_summary(geom="errorbar", fun.data=mean_se, position=position_dodge()) +
  facet_wrap(~Pattern_Token,scales="free_x") +
  labs(title="Testing Performance - All Sbjs.", y="Accuracy") 

```

<!-- ::: -->

\normalsize

## References

::: {#refs}
:::